#include <bits/stdc++.h>
#include <omp.h>

using namespace std;

const int N = 1e5 + 5;
vector<int> g[N];
bool visbfs[N];
bool visdfs[N];


void bfs(int s) {
    queue<int> q;
    q.push(s);
    visbfs[s] = true;

    while (!q.empty()) {
        int u = q.front();
        cout << u << " ";
        q.pop();

        #pragma omp parallel for
        for (int i = 0; i < g[u].size(); i++) {
            int v = g[u][i];
            if (!visbfs[v]) {
                visbfs[v] = true;
                q.push(v);
            }
        }
    }
}

void dfs(int u) {
    visdfs[u] = true;
    cout << u << " ";
    

    #pragma omp parallel for
    for (int i = 0; i < g[u].size(); i++) {
        int v = g[u][i];
        if (!visdfs[v])
            dfs(v);
    }
}

int main() {
    int n, m, s;
    cin >> n >> m >> s;

    for (int i = 0; i < m; i++) {
        int x, y;
        cin >> x >> y;
        g[x].push_back(y);
        g[y].push_back(x);
    }

    cout << "BFS: "; 
    bfs(s);
    cout << "\nDFS: ";
    dfs(s);
    

    return 0;
}











// Input
// 6 7 1
// 1 2
// 1 3
// 2 4
// 2 5
// 3 5
// 4 6
// 5 6

// Output
// BFS: 1 2 3 4 5 6 
// DFS: 1 2 4 6 5 3